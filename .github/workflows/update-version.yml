name: Update Version

on:
  repository_dispatch:
    types: [version-released]

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract version info
        id: version
        run: |
          VERSION="${{ github.event.client_payload.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          MAJOR=$(echo "$VERSION" | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3 | cut -d'-' -f1)

          if [[ "$VERSION" == *"-"* ]]; then
            NEXT_MINOR="v$MAJOR.$MINOR.$PATCH"
          else
            NEXT_MINOR="v$MAJOR.$((MINOR+1)).0"
          fi
          echo "next_version=$NEXT_MINOR" >> $GITHUB_OUTPUT

      - name: Create update branch
        run: |
          BRANCH="update-${{ steps.version.outputs.version }}"

          git fetch origin
          if git show-ref --verify --quiet refs/remotes/origin/"$BRANCH"; then
            echo "Deleting existing remote branch $BRANCH"
            git push origin --delete "$BRANCH"
          fi

          git checkout -b "$BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_ENV

      - name: Update config
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          NEXT="${{ steps.version.outputs.next_version }}"
          MAJOR=$(echo "$VERSION" | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3 | cut -d'-' -f1)

          if [[ "$VERSION" == *"-"* ]]; then
            # Pre-release: update pre_release field only
            if [[ "$MAJOR" == "3" ]]; then
              sed -i "s/v3_pre_release: .*/v3_pre_release: \"$VERSION\"/" docs/config.yml
            else
              sed -i "s/v4_pre_release: .*/v4_pre_release: \"$VERSION\"/" docs/config.yml
            fi
          else
            # Stable release: update current field, clear pre_release
            if [[ "$MAJOR" == "3" ]]; then
              sed -i "s/v3_current: .*/v3_current: \"$VERSION\"/" docs/config.yml
              sed -i "s/v3_pre_release: .*/v3_pre_release: null/" docs/config.yml
              # Only update next version and date for minor releases (not patches)
              if [[ "$PATCH" == "0" ]]; then
                NEXT_DATE=$(date -d "+4 months" +%Y-%m-%d)
                sed -i "s/v3_next: .*/v3_next: \"$NEXT\"/" docs/config.yml
                sed -i "s/v3_next_date: .*/v3_next_date: $NEXT_DATE/" docs/config.yml
              fi
            else
              sed -i "s/v4_current: .*/v4_current: \"$VERSION\"/" docs/config.yml
              sed -i "s/v4_pre_release: .*/v4_pre_release: null/" docs/config.yml
              # Only update next version and date for minor releases (not patches)
              if [[ "$PATCH" == "0" ]]; then
                NEXT_DATE=$(date -d "+4 months" +%Y-%m-%d)
                sed -i "s/v4_next: .*/v4_next: \"$NEXT\"/" docs/config.yml
                sed -i "s/v4_next_date: .*/v4_next_date: $NEXT_DATE/" docs/config.yml
              fi
            fi
          fi

      - name: Add to versions table
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          MAJOR=$(echo "$VERSION" | cut -d. -f1 | sed 's/v//')

          if [[ "$MAJOR" == "4" ]]; then
            # Insert after header for v4 versions (top of table)
            sed -i "/|---|---|/a | $VERSION | $DATE |" docs/versions.md
          else
            # Insert before first v3 version or at end if no v3 versions exist
            if grep -q "| v3\." docs/versions.md; then
              sed -i "0,/| v3\./{s/| v3\./| $VERSION | $DATE |\n&/}" docs/versions.md
            else
              echo "| $VERSION | $DATE |" >> docs/versions.md
            fi
          fi

      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update home page from config
        run: |
          # Read values from config.yml and update index.md accordingly
          V3_CURRENT=$(yq '.site.v3_current' docs/config.yml)
          V3_PRE=$(yq '.site.v3_pre_release' docs/config.yml)
          V3_NEXT=$(yq '.site.v3_next' docs/config.yml)
          V3_DATE=$(yq '.site.v3_next_date' docs/config.yml)

          V4_CURRENT=$(yq '.site.v4_current' docs/config.yml)
          V4_PRE=$(yq '.site.v4_pre_release' docs/config.yml)
          V4_NEXT=$(yq '.site.v4_next' docs/config.yml)
          V4_DATE=$(yq '.site.v4_next_date' docs/config.yml)

          # Update v3 section
          if [[ "$V3_CURRENT" != "null" ]]; then
            sed -i "s/- Current: v3\.[0-9]\+\.[0-9]\+/- Current: $V3_CURRENT/" docs/index.md
          fi
          if [[ "$V3_PRE" != "null" ]]; then
            sed -i "s/- Pre-release: v3\.[0-9]\+\.[0-9]\+.*/- Pre-release: $V3_PRE/" docs/index.md
          fi
          if [[ "$V3_DATE" != "null" ]]; then
            V3_DISPLAY_DATE=$(date -d "$V3_DATE" +%B\ %d,\ %Y)
            sed -i "s/- Next: v3\.[0-9]\+\.[0-9]\+ .*/- Next: $V3_NEXT ($V3_DISPLAY_DATE)/" docs/index.md
          else
            sed -i "s/- Next: v3\.[0-9]\+\.[0-9]\+ .*/- Next: $V3_NEXT/" docs/index.md
          fi

          # Update v4 section
          if [[ "$V4_CURRENT" != "null" ]]; then
            sed -i "s/- Current: v4\.[0-9]\+\.[0-9]\+/- Current: $V4_CURRENT/" docs/index.md
          fi
          if [[ "$V4_PRE" != "null" ]]; then
            sed -i "s/- Pre-release: v4\.[0-9]\+\.[0-9]\+.*/- Pre-release: $V4_PRE/" docs/index.md
          fi
          if [[ "$V4_DATE" != "null" ]]; then
            V4_DISPLAY_DATE=$(date -d "$V4_DATE" +%B\ %d,\ %Y)
            sed -i "s/- Next: v4\.[0-9]\+\.[0-9]\+ .*/- Next: $V4_NEXT ($V4_DISPLAY_DATE)/" docs/index.md
          else
            sed -i "s/- Next: v4\.[0-9]\+\.[0-9]\+ .*/- Next: $V4_NEXT/" docs/index.md
          fi

      - name: Commit and create PR
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          git add .
          git commit -s -m "Update docs for ${{ steps.version.outputs.version }}"
          git push origin "${{ env.branch }}"

          gh pr create \
            --title "Update docs for ${{ steps.version.outputs.version }}" \
            --body "Automated documentation update for release ${{ steps.version.outputs.version }}" \
            --base main \
            --head "${{ env.branch }}"
